<?php

/**
 * @file
 * Install file.
 */

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\user\Entity\Role;

/**
 * Implements hook_install().
 */
function vactory_notifications_install() {
  $existing_roles = Role::loadMultiple();
  $notifications_config = Drupal::configFactory()->getEditable('vactory_notifications.settings');
  foreach ($existing_roles as $key => $role) {
    if ($key == 'administrator') {
      $notifications_config->set($key . '_content_types', ['vactory_page']);
    }
    else {
      $notifications_config->set($key . '_content_types', []);
    }
  }
  $notifications_config->save();

  $improved_multi_select_config = Drupal::configFactory()->getEditable('improved_multi_select.settings');
  $urls = $improved_multi_select_config->get('url');
  $urls .= PHP_EOL . '*/admin/config/system/notifications-configuration';
  $improved_multi_select_config->set('url', $urls)->save();
}

/**
 * Implements hook_uninstall().
 */
function vactory_notifications_uninstall() {
  // Delete vactory notifications config.
  $notifications_config = Drupal::configFactory()->getEditable('vactory_notifications.settings');
  $notifications_config->delete();
}

/**
 * Install notifications title and message node fields.
 */
function vactory_notifications_update_8102(&$sandbox) {
  $entityUpdateManager = \Drupal::entityDefinitionUpdateManager();
  // The notification entity title.
  $notification_title_field = BaseFieldDefinition::create('string')
    ->setLabel(t('Notifications title'))
    ->setDescription(t('Set the noifications title of current node.'))
    ->setSettings([
      'max_length' => 255,
      'text_processing' => 0,
    ])
    ->setTranslatable(TRUE)
    ->setDisplayOptions('form', [
      'type' => 'string_textfield',
      'weight' => -6,
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  $entityUpdateManager->installFieldStorageDefinition(
    'notification_title', 'node', 'vactory_notifications', $notification_title_field
  );

  // Notification details/message.
  $notification_message_field = BaseFieldDefinition::create('string_long')
    ->setLabel(t('Notifications message'))
    ->setDescription(t('Set the notification message of current node'))
    ->setSettings([
      'default_value' => '',
      'text_processing' => 0,
    ])
    ->setTranslatable(TRUE)
    ->setDisplayOptions('form', [
      'type' => 'string_textarea',
      'weight' => -1,
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  $entityUpdateManager->installFieldStorageDefinition(
    'notification_message', 'node', 'vactory_notifications', $notification_message_field
  );
}

/**
 * Install Mail notifications subject and message node fields.
 */
function vactory_notifications_update_8103(&$sandbox) {
  $entityUpdateManager = \Drupal::entityDefinitionUpdateManager();
  // Mail subject.
  $mail_subject_field = BaseFieldDefinition::create('string')
    ->setLabel(t('Mail Notifications subject'))
    ->setDescription(t('Set the mail noifications subject of current node.'))
    ->setSettings([
      'max_length' => 255,
      'text_processing' => 0,
    ])
    ->setTranslatable(TRUE)
    ->setDisplayOptions('form', [
      'type' => 'string_textfield',
      'weight' => -6,
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  $entityUpdateManager->installFieldStorageDefinition(
    'mail_subject', 'node', 'vactory_notifications', $mail_subject_field
  );

  // Mail details/message.
  $mail_message_field = BaseFieldDefinition::create('string_long')
    ->setLabel(t('Mail Notifications message'))
    ->setDescription(t('Set the mail notification message of current node'))
    ->setSettings([
      'default_value' => '',
      'text_processing' => 0,
    ])
    ->setTranslatable(TRUE)
    ->setDisplayOptions('form', [
      'type' => 'string_textarea',
      'weight' => -1,
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  $entityUpdateManager->installFieldStorageDefinition(
    'mail_message', 'node', 'vactory_notifications', $mail_message_field
  );
}

/**
 * Update node entity type - Install generate notification field storage.
 */
function vactory_notifications_update_8105(&$sandbox) {
  // Generate notification.
  $field_definition = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Generate notification'))
    ->setDescription(t('Check this to generate a notification for this content'))
    ->setTranslatable(TRUE)
    ->setDefaultValue(1)
    ->setDisplayOptions('form', [
      'type' => 'boolean_checkbox',
      'settings' => [
        'display_label' => TRUE,
      ],
    ])
    ->setDisplayConfigurable('form', TRUE);
  Drupal::entityDefinitionUpdateManager()->installFieldStorageDefinition('generate_notification', 'node', 'vactory_notifications', $field_definition);
}

/**
 * Update Mail notifications message node widget type.
 */
function vactory_notifications_update_8106(&$sandbox) {
  $entityUpdateManager = \Drupal::entityDefinitionUpdateManager();
  // Get the existing field storage definition.
  $field_storage = $entityUpdateManager->getFieldStorageDefinition('mail_message', 'node', 'vactory_notifications');
  // Create a new field definition with the text_long type.
  $new_mail_message_field = BaseFieldDefinition::create('text_textarea')
    ->setLabel(t('Mail Notifications message'))
    ->setDescription(t('Set the mail notification message of current node'))
    ->setSettings([
      'default_value' => '',
      'text_processing' => 0,
    ])
    ->setTranslatable(TRUE)
    ->setDisplayOptions('form', [
      'type' => 'text_textarea',
      'weight' => -1,
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);
  // Update the field storage definition with the new field definition.
  $entityUpdateManager->updateFieldStorageDefinition($field_storage, $new_mail_message_field);
}
